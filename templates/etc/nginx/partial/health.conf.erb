location = @healthcheck {
  internal;

  proxy_method GET;
  proxy_pass_request_headers off;
  proxy_pass_request_body off;
  proxy_set_header User-Agent "Aptible Health Check";
  proxy_set_header X-Aptible-Health-Check 1;

  rewrite ^ /healthcheck break;

  <% if ENV['UPSTREAM_SERVERS'] %>
    proxy_pass http://containers;
    <% unless ENV['DISABLE_HTTP_1_1_HEALTHCHECK']%> 
      proxy_http_version 1.1;
    <% else %>
      proxy_http_version 1.0;
    <% end %>
  <% else %>
    return 502;
  <% end %>
}

location = /.aptible/alb-healthcheck {
  default_type 'text/plain';

  <% if ENV['FORCE_HEALTHCHECK_SUCCESS'] == 'true' %>
    return 200 "";
  <% else %>
    content_by_lua_block {
      function setStatusFromCache()
        local cachedStatus, cachedStatusFlags = ngx.shared.health:get("status")

        if cachedStatus then
          ngx.log(ngx.INFO, "health: status from cache: " .. cachedStatus)
          ngx.status = cachedStatus
          ngx.say("cache:" .. cachedStatus)
          return true
        end

        -- Second return value is actually the error here
        if cachedStatusFlags then
          ngx.log(ngx.ERROR, "health: status error: " .. cachedStatusFlags)
        end

        ngx.log(ngx.DEBUG, "health: no cache")

        return false
      end

      function setStatus()
        if setStatusFromCache() then
          return
        end

        -- If another request is currently running the health check,
        -- wait a little before checking the cache again.
        local hold, holdFlags = ngx.shared.health:get("hold")
        if hold then
          ngx.log(ngx.DEBUG, "health: hold")
          ngx.sleep(1)
          if setStatusFromCache() then
            return
          end
        end

        -- Tell other requests coming in during the next 2 seconds to hold while
        -- we run the health check.
        local holdOk, holdErr = ngx.shared.health:safe_set("hold", true, 2)
        if not holdOk then
          ngx.log(ngx.ERROR, "health: failed to set hold: " .. holdErr)
        end

        -- Make the actual upstream request
        local r = ngx.location.capture("@healthcheck")

        -- Decide what this status means
        local upstreamStatus

        if r.status == 502 then
          upstreamStatus = r.status
        else
        <% if ENV['STRICT_HEALTH_CHECKS'] == 'true' %>
          upstreamStatus = r.status
        <% else %>
          upstreamStatus = 200
        <% end %>
        end

        -- Record our resulting status, make this valid for 5 seconds.
        local statusOk, statusErr, forcible = ngx.shared.health:set("status", upstreamStatus, 5)
        if not statusOk then
          ngx.log(ngx.ERROR, "health: failed to set status: " .. statusErr)
        end

        ngx.log(ngx.INFO, "health: derived status from upstream: " .. upstreamStatus)
        ngx.log(ngx.DEBUG, "health: real status from upstream: " .. r.status)

        ngx.status = upstreamStatus
        ngx.say("upstream:" .. upstreamStatus)
      end

      setStatus()
    }
  <% end %>
}
